plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
//    id 'signing'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

//apply from: "$rootDir/gradle/publishing.gradle"

repositories {
    mavenCentral()
}

jacoco {
    toolVersion '0.8.11'
}

dependencies {
    ext.autoValueVersion = '2.0.0'
    ext.autoServiceVersion = '2.0.0'

    implementation group: 'org.springframework', name: 'spring-context', version: '6.1.6'
    implementation group: 'org.springframework', name: 'spring-webflux', version: '6.1.7'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.17.1'

    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

    testImplementation('org.assertj:assertj-core:3.25.3')
    testImplementation('ch.qos.logback:logback-core:1.5.6')
    testImplementation('com.squareup.okhttp3:mockwebserver:4.12.0')
    testImplementation('org.testng:testng:7.10.2')
    testImplementation('ch.qos.logback:logback-classic:1.5.6')
    testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.2.1'

}

ext.compatibilityVersion = JavaVersion.VERSION_17
ext.javadocPath = compatibilityVersion.isJava8() ? '' : 'en/java/'
ext.sourceCompatibility = compatibilityVersion
ext.targetCompatibility = compatibilityVersion

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("-parameters")
    options.compilerArgs += ["-Xlint:-options"]
}
tasks.withType(Jar) { task ->
    task.doLast {
        ant.checksum algorithm: 'md5', file: it.archivePath
        ant.checksum algorithm: 'sha1', file: it.archivePath
        ant.checksum algorithm: 'sha-256', file: it.archivePath, fileext: '.sha256'
        ant.checksum algorithm: 'sha-512', file: it.archivePath, fileext: '.sha512'
    }
}


test {
    useTestNG()
    forkEvery = 1
    maxParallelForks = 1
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Jenkins REST client',
            'Implementation-Version': archiveVersion,
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date(),
            'Built-JDK': System.getProperty('java.version'),
            'Built-Gradle': gradle.gradleVersion
    }
}


tasks.register('mockTest', Test) {
    group = "Verification"
    description = "Mock tests"
    useTestNG()
    include '**/**MockTest*'
    forkEvery = 1
    maxParallelForks = 4
}

tasks.register('integTest', Test) {
    group = "Verification"
    description = "Integration tests - Jenkins must be running. See the README."
    useTestNG()
    include "**/**LiveTest*"
    forkEvery = 1
    maxParallelForks = 1
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
        html.required = true
    }
}
java {
    withJavadocJar()
    withSourcesJar()
}
javadoc {
    source = sourceSets.main.allJava
    options.with {
        links "https://docs.oracle.com/${javadocPath}javase/${compatibilityVersion.toString().replaceAll(/.*\./, "")}/docs/api"
        addStringOption('Xdoclint:none', '-quiet')
        addStringOption('source', compatibilityVersion.toString().replaceAll(/.*\./, ""))
    }
}

group = 'io.github.hillelmed'
version = '1.0.1'
description = 'Java client for working with Jenkins REST API'

publishing {
    publications {
        maven(MavenPublication) {
            group = 'io.github.hillelmed'
            version = '1.0.1'
            description = 'Java client for working with Jenkins REST API'

            from components.java
            pom {
                name = 'Jenkins rest client in java'
                description = 'Java client for working with Jenkins REST API'
                url = 'https://github.com/Hillelmed/jenkins-client-java'
                packaging 'jar'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'http://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'HillelMed'
                        name = 'Hillel medioni'
                        email = 'hillel95med@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:https://github.com/Hillelmed/jenkins-client-java.git'
                    developerConnection = 'scm:git://github.com/Hillelmed/jenkins-client-java.git'
                    url = 'https://github.com/Hillelmed/jenkins-client-java/'
                }
            }

        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/hillelmed/jenkins-client-java"
            credentials {
                username = 'here'
                password = 'here'
            }
        }

    }

}
//signing {
//    sign configurations.archives
//}
